#!/usr/bin/python
from time import time 
from pytube import Playlist,YouTube
from concurrent.futures import as_completed, ThreadPoolExecutor
import sys


start=time()
def is_playlist(og_url):
    return True if (og_url.__contains__("list")) else False

def get_length(lnk):
   return int(YouTube(lnk).length)

def get_title(lnk):
    return YouTube(lnk).title
def print_fmt(ss):
    minutes,secs = divmod(ss,60)
    hours,minutes = divmod(minutes,60)
    print(f'{hours:d}:{minutes:02d}:{secs:02d}')
def get_playlist_urls(p):
    global ptitle
    global num_workers
    ptitle = p.title
    num_workers = p.length
    return p.video_urls
    
arg_url=str(sys.argv[1])
if(not is_playlist(arg_url)):
    print(get_title(arg_url))
    print_fmt(get_length(arg_url))
    sys.exit("Done.")
print(f"link is a playlist")
ptitle=''
num_workers=0
urls_list=get_playlist_urls(Playlist(arg_url))
print(f'Playlist Name: {ptitle}, length:{num_workers}')
threads=list()
threads_s=list()
titles=list()
time_s=list()
with ThreadPoolExecutor(max_workers=num_workers) as execc:
    for link in urls_list:
        threads.append(execc.submit(get_title,link))
for job in as_completed(threads):
    titles.append(job.result())
    #print(job.result())

with ThreadPoolExecutor(max_workers=num_workers) as exexc:
    for link in urls_list:
        threads_s.append(exexc.submit(get_length,link))
for job in as_completed(threads_s):
    time_s.append(job.result())
print("Total Length: ",sep='',end='')
# Time is off by seconds (divmod?)
print_fmt(sum(time_s))
print(f"Number of Videos:{len(urls_list)}")
print(f"Time to Execute: {time()-start}")
